<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ComboBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/RevisionControl;component/Themes/DarkTheme.xaml" />
        <ResourceDictionary Source="pack://application:,,,/RevisionControl;component/Themes/LightTheme.xaml" />

    </ResourceDictionary.MergedDictionaries>
    <!--  Custom Style for DataGrid Header  -->
    <Style x:Key="CustomDataGridColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
        <!--  Set your desired background color  -->
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <!--  Set your desired foreground color  -->
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="BorderBrush" Value="Gray" />
        <Setter Property="BorderThickness" Value="0,0,1,1" />
    </Style>

    <!--  Custom Style for Center-Aligned Cell Content  -->
    <Style x:Key="CenterAlignedCellStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <!--  Custom Style for DataGrid  -->
    <Style
        x:Key="CustomDataGridStyle"
        BasedOn="{StaticResource {x:Type DataGrid}}"
        TargetType="{x:Type DataGrid}">
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="SelectionUnit" Value="FullRow" />
    </Style>
    <!--  Global DarkThemeComboBox  -->
    <Style
        x:Key="DarkThemeComboBox"
        BasedOn="{StaticResource MaterialDesignComboBox}"
        TargetType="{x:Type ComboBox}">
        <!--  Base Properties  -->
        <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2,0,2,0" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="materialDesign:HintAssist.IsFloating" Value="True" />
        <Setter Property="materialDesign:HintAssist.Foreground" Value="{DynamicResource ForegroundBrush}" />

        <!--  ItemContainerStyle for ComboBox Items  -->
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ComboBoxItem}">
                    <Setter Property="Padding" Value="0,2,0,2" />
                    <Setter Property="Margin" Value="0,1,0,1" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
                    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                    <Setter Property="BorderThickness" Value="0" />
                    <!--  Triggers for ComboBoxItem  -->
                    <Style.Triggers>
                        <!--  Mouse Over Trigger  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource HighlightBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                        </Trigger>
                        <!--  Selected Trigger  -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource HighlightBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>

        <!--  ControlTemplate for ComboBox  -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <!--  ComboBox Content  -->
                        <ToggleButton
                            x:Name="ToggleButton"
                            HorizontalContentAlignment="Center"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            FocusVisualStyle="{x:Null}"
                            Foreground="{TemplateBinding Foreground}"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <ContentPresenter
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
                        </ToggleButton>

                        <!--  Dropdown Popup  -->
                        <Popup
                            x:Name="Popup"
                            AllowsTransparency="True"
                            Focusable="False"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            Placement="Bottom">
                            <Border
                                x:Name="PopupBorder"
                                Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                Background="{DynamicResource SecondaryBackgroundBrush}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <ScrollViewer Margin="4,6,4,6">
                                    <StackPanel IsItemsHost="True" />
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                    <!--  Triggers for ComboBox  -->
                    <ControlTemplate.Triggers>
                        <!--  Disabled State Trigger  -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                        <!--  Mouse Over Trigger (Change Background to Red)  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ToggleButton" Property="Background" Value="Red" />
                            <Setter TargetName="ToggleButton" Property="BorderBrush" Value="Red" />
                        </Trigger>
                        <!--  DropDown Open Trigger  -->
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="ToggleButton" Property="Background" Value="{DynamicResource HighlightBrush}" />
                            <Setter TargetName="ToggleButton" Property="BorderBrush" Value="{DynamicResource HighlightBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style
        x:Key="CustomTextBoxStyle"
        BasedOn="{StaticResource {x:Type TextBox}}"
        TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border
                        x:Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer x:Name="PART_ContentHost" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--  Change border color on mouse over  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SelectionHoverBrush}" />
                        </Trigger>
                        <!--  Change border color on focus  -->
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource TextHighlightBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomActionButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="200" />
        <Setter Property="Height" Value="50" />
        <Setter Property="Margin" Value="0,5,0,0" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="ButtonBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5">
                        <ContentPresenter
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--  Hover Effect  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource IconHoverBrush}" />
                        </Trigger>
                        <!--  Pressed Effect  -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource IconHoverBrush}" />
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="MultiRowHeaderStyle"
        BasedOn="{StaticResource CustomDataGridColumnHeaderStyle}"
        TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="Gray"
                        BorderThickness="0,0,1,1">
                        <Grid>
                            <!--  Main Header Text  -->
                            <TextBlock
                                Grid.Row="0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontWeight="Bold"
                                Text="{TemplateBinding Content}"
                                TextAlignment="Center"
                                TextWrapping="Wrap" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomTextBlock" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="Margin" Value="2,0,2,0" />
    </Style>

    <Style x:Key="CustomCheckBox" TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <StackPanel VerticalAlignment="Center" Orientation="Horizontal">
                        <Border
                            x:Name="CheckBoxBorder"
                            Width="14"
                            Height="14"
                            Margin="0,0,5,0"
                            VerticalAlignment="Center"
                            Background="{DynamicResource PrimaryBackgroundBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="1.2"
                            CornerRadius="3">
                            <Path
                                x:Name="CheckMark"
                                Data="M 2 7 L 5 10 L 10 3"
                                SnapsToDevicePixels="True"
                                Stroke="{DynamicResource PrimaryBackgroundBrush}"
                                StrokeEndLineCap="Round"
                                StrokeStartLineCap="Round"
                                StrokeThickness="2.3"
                                Visibility="Collapsed" />
                        </Border>
                        <ContentPresenter
                            Margin="0"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <!--  Checked state: show checkmark  -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckBoxBorder" Property="Background" Value="{DynamicResource PrimaryBackgroundBrush}" />
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="CheckMark" Property="Stroke" Value="{DynamicResource ForegroundBrush}" />
                        </Trigger>
                        <!--  Disabled state  -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource IconForegroundBrush}" />
                            <Setter TargetName="CheckBoxBorder" Property="BorderBrush" Value="{DynamicResource IconForegroundBrush}" />
                            <Setter TargetName="CheckMark" Property="Stroke" Value="{DynamicResource IconForegroundBrush}" />
                        </Trigger>
                        <!--  Mouse over  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="CheckBoxBorder" Property="BorderBrush" Value="{DynamicResource IconHoverBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>